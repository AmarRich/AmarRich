- 👋 Hi, I’m @AmarRich
- 👀 I’m interested in ...
- 🌱 I’m currently learning ...
- 💞️ I’m looking to collaborate on ...
- 📫 How to reach me ...

<!---
AmarRich/AmarRich is a ✨ special ✨ repository because its `README.md` (this file) appears on your GitHub profile.
You can click the Preview link to take a look at your changes.
--->


class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int r= maze.size(),step=1;
        int c= maze[0].size();
        queue<pair<int,int>> q;
        vector<vector<int>> dir={ {0,1},{0,-1}, {1,0}, {-1,0}};
        q.push({entrance[0],entrance[1]});
        maze[entrance[0]][entrance[1]] ='+'; // making changes in maze to mark as visited 
        while(!q.empty()){ // BFS traversal
            int s=q.size();
            for(int i=0;i<s;i++){
                 pair<int,int> p=q.front(); q.pop();
                for(int k=0;k<4;k++){ // row wise traversal of dir
                       int x=p.first+dir[k][0];
                       int y=p.second+dir[k][1];
                    if(x<0 or y<0 or x>= r or y>=c or maze[x][y]=='+') continue;
                    if(x==0 or y==0 or x==r-1 or y==c-1) return step;
                    maze[x][y]='+'; q.push({x,y});
                }
            }
            step++;
        }
        return -1;
    }
};
